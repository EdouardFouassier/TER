De nos jour les échanges par les différents réseau sont centralisé  dans des base de données distante ou cloud.
Pour gagner en efficacité il faut minimisé la latence lors de l'envoie d'un message vers un cloud.
Nous utilisons un modèle ou les messages sont envoyés periodiquement et le temps entre l'envoie et la reception est fixe.
Dans ce modèle il y a deux periodes de taille P, l'envoie du message est placé sur la première periode et la réception sur la seconde après une delay.
Il faut donc réussir a placer un maximum de messages dans la periode.

Nous utilisons des structures:
La structure Periode représentant les intervales disponibles d'une periode.
Periode:
	entier begin. Le debut de la periode libre.
	entier end. La fin de la periode libre.
	Periode next. La periode libre suivante.

La structure Tasktab représente un tableau de tâches.
Tasktab:
	tableau de tache tab. 
	entier taille.

Task:
	entier num. Le numero de la tache pour l'identifier.
	entier delay. Le delai avant le retour sur la dexime periode.
	un tableau de 2 entier cycle. Le temps occupé sur la première et deuxième periode.
	entier place. La place dans la periode, son début sur la première periode, si la tache n'est pas placé cette valeur est à -1.

FirstFit:
|	Pour chaque tache t:
|	|	Pour i de 0 a la Periode max:
|	|	|	si t entre dans la periode aller et t entre dans la periode retour après le delay:
|	|	|	|	on place la tache:
|	|	|	|		t.place=i.
|	|	|	|		on reduit les periode.



AlgoLourd:
|	compteurMin=100
|	tacheMin=0
|	libreMin=0;
|	Pour chaque tache
|	|	Pour chaque tache t:
|	|	|	compteur=0
|	|	|	Pour i de 0 a la Periode max:
|	|	|	|	si t entre dans la periode aller et t entre dans la periode retour après le delay:
|	|	|	|	|	compteur=compteur+1
|	|	|	|	|	libre=i
|	|	|	Si compteur<=compteurMin:
|	|	|	|	compteur=compteurMin
|	|	|	|	tacheMin=t
|	|	|	|	libreMin=libre
|	|	on place la tache:
|	|	|	tacheMin.place=libreMin
|	|	|	reduire la periode


