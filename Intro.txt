Dans le cadre du module TER du S2 Master Informatique à l’UVSQ, nous avons eu l’occasion de réaliser un projet sous la direction de Mr Yann Strozecki et Mael Guiraud.
Nous avons choisi, parmi les sujets proposés, le sujet "Algorithme glouton de remplissage" car c'est une sujet qui demande une bonne compréhension de l'algorithmique ce qui nous a beaucoup intéressé.

De nos jour les échanges par les différents réseaux sont centralisés dans des bases de données distante ou cloud.
Pour gagner en efficacité il faut minimisé la latence lors de l'envoie d'un message vers un cloud.

L'objectif de ce projet est de concevoir et comparer des algorithmes gloutons qui permettent de placer au mieux des tâches periodiques avec des contraintes portant sur les paires de tâches.
Pour cela nous utilisons un modèle où les tâches sont envoyés periodiquement et le temps entre l'envoie et la reception est fixe.
Dans ce modèle il y a deux periodes de taille P, l'envoie du tâches est placé sur la première periode et la réception sur la seconde après un delai.
Il faut donc réussir a placer un maximum de tâches dans la periode.

Nous utilisons des structures:
La structure Periode représentant les intervales disponibles d'une periode.
Periode:
	entier begin. Le debut de la periode libre.
	entier end. La fin de la periode libre.
	Periode next. La periode libre suivante.

La structure Tasktab représente un tableau de tâches.
Tasktab:
	tableau de tache tab. 
	entier taille.

Dans un premier temps nous utilisions les structures suivantes:
chaine:
    Task t. une tache
    chaine next; la tache suivante.

La periode était stocké dans deux tableaux d'entier, nous écrivions le numéro de la tache dans la ou les cases qu'elle occupait.
Mais comme seul les espaces disponibles de la periode nous interesse, cette structure n'était pas optimale.
Nous sommes donc passé a une structure représentant les espaces libres de la periode sous forme d'une chaine.
Une periode initiale de taille 10 est passé de
[0,0,0,0,0,0,0,0,0,0] à [0,9]
et avec une tache de taille deux placé en 5
[0,0,0,0,0,1,1,0,0,0] à [0,4]->[6,9]
Les taches ne sont plus stockés dans une liste mais dans un tableau.
Cela a permis de réduire la méméoire utilisé et d'augmenter la taille des tests effectués.

Task:
	entier num. Le numero de la tache pour l'identifier.
	entier delay. Le delai avant le retour sur la dexime periode.
	un tableau de 2 entier cycle. Le temps occupé sur la première et deuxième periode.
	entier place. La place dans la periode, son début sur la première periode, si la tache n'est pas placé cette valeur est à -1.

FirstFit:
|	Pour chaque tache t:
|	|	Pour i de 0 a la Periode max:
|	|	|	si t entre dans la periode aller et t entre dans la periode retour après le delay:
|	|	|	|	on place la tache:
|	|	|	|		t.place=i.
|	|	|	|		on reduit les periode.



AlgoLourd:
|	compteurMin=PeriodeMax
|	tacheMin=0
|	libreMin=0;
|	Pour chaque tache
|	|	Pour chaque tache t:
|	|	|	compteur=0
|	|	|	Pour i de 0 a la Periode max:
|	|	|	|	si t entre dans la periode aller et t entre dans la periode retour après le delay:
|	|	|	|	|	compteur=compteur+1
|	|	|	|	|	libre=i
|	|	|	Si compteur<=compteurMin:
|	|	|	|	compteur=compteurMin
|	|	|	|	tacheMin=t
|	|	|	|	libreMin=libre
|	|	on place la tache:
|	|	|	tacheMin.place=libreMin
|	|	|	reduire la periode


